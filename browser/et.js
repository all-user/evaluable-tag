require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var m = require('./lib');
module.exports = m;

},{"./lib":2}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var _init, appendCSS, styleEle;

  styleEle = null;

  _init = function() {
    styleEle = document.createElement('style');
    return document.head.appendChild(styleEle);
  };

  appendCSS = function(rule) {
    var sheet;
    sheet = styleEle.sheet;
    sheet.insertRule(rule, sheet.cssRules.length);
    return styleEle;
  };

  appendCSS.reset = function() {
    document.head.removeChild(styleEle);
    return _init();
  };

  _init();

  module.exports = appendCSS;

}).call(this);

},{}],3:[function(require,module,exports){
var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;
var undefined;

var isPlainObject = function isPlainObject(obj) {
	'use strict';
	if (!obj || toString.call(obj) !== '[object Object]') {
		return false;
	}

	var has_own_constructor = hasOwn.call(obj, 'constructor');
	var has_is_property_of_method = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
	// Not own constructor property must be Object
	if (obj.constructor && !has_own_constructor && !has_is_property_of_method) {
		return false;
	}

	// Own properties are enumerated firstly, so to speed up,
	// if last one is own, then all properties are own.
	var key;
	for (key in obj) {}

	return key === undefined || hasOwn.call(obj, key);
};

module.exports = function extend() {
	'use strict';
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0],
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if (typeof target === 'boolean') {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {
		target = {};
	}

	for (; i < length; ++i) {
		options = arguments[i];
		// Only deal with non-null/undefined values
		if (options != null) {
			// Extend the base object
			for (name in options) {
				src = target[name];
				copy = options[name];

				// Prevent never-ending loop
				if (target === copy) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
					if (copyIsArray) {
						copyIsArray = false;
						clone = src && Array.isArray(src) ? src : [];
					} else {
						clone = src && isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[name] = extend(deep, clone, copy);

				// Don't bring in undefined values
				} else if (copy !== undefined) {
					target[name] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};


},{}],"evaluable-tag":[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var EvaluableTag, _eval, _hide, appendCSS, evalAnnotationsBy, evalBy, extend, hidQueries;

  extend = require('extend');

  appendCSS = require('append-css');

  hidQueries = [];

  _hide = function(qs) {
    return appendCSS(qs + " {\n  width      : 0;\n  height     : 0;\n  line-height: 0;\n  visibility : hidden;\n}");
  };

  _eval = function(qs, select) {
    var tags;
    tags = document.querySelectorAll(qs);
    return [].map.call(tags, function(tag) {
      var res, target;
      target = select(tag);
      res = eval("(" + (tag.getAttribute('data-eval')) + ")");
      return {
        annotation: tag,
        annotated: target,
        result: res
      };
    });
  };

  evalAnnotationsBy = function(qs) {
    if (hidQueries.indexOf(qs) === -1) {
      hidQueries.push(qs);
      _hide(qs);
    }
    return _eval(qs, function(tag) {
      var target;
      target = tag.nextSibling;
      while ((target != null ? target.nodeType : void 0) === Node.TEXT_NODE) {
        target = target.nextSibling;
      }
      return target;
    });
  };

  evalBy = function(qs) {
    return _eval(qs, function(tag) {
      return tag;
    });
  };

  EvaluableTag = {
    evalAnnotationsBy: evalAnnotationsBy,
    evalBy: evalBy
  };

  module.exports = EvaluableTag;

}).call(this);

},{"append-css":1,"extend":3}]},{},[]);
